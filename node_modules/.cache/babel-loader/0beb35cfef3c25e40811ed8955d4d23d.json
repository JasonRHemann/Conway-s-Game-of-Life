{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EvolveD\\\\Desktop\\\\ConwaysGameOfLife\\\\src\\\\Components\\\\Grid.js\";\nimport React, { useState, useCallback } from \"react\";\nimport produce from \"immer\"; // Set the number of rows and columns.  Make this adjustable later\n\nconst numRows = 25;\nconst numCols = 25;\n\nconst Grid = () => {\n  // Creating a grid and grid state and looping over it setting all initial values to 0\n  const [grid, setGrid] = useState(() => {\n    const rows = [];\n\n    for (var i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => 0));\n    }\n\n    return rows;\n  });\n  const [running, setRunning] = useState(false);\n  const runningRef = useRef(running);\n  runningRef.current = running; // Simulation function\n\n  const runSimulation = useCallback(() => {\n    if (!running) {\n      return;\n    }\n\n    setTimeout(runSimulation, 1000);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setRunning(!running),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, running ? \"Stop\" : \"Start\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"grid\",\n      gridTemplateColumns: `repeat(${numCols}, 20px)`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, grid.map((rows, i) => rows.map((col, k) => /*#__PURE__*/React.createElement(\"div\", {\n    key: `${i}-${k}` //Make grid clickable\n    ,\n    onClick: () => {\n      //Setting grid to new copy so that it is mutable\n      const newGrid = produce(grid, gridCopy => {\n        gridCopy[i][k] = grid[i][k] ? 0 : 1;\n      });\n      setGrid(newGrid);\n    } //Setting width, height, and background color.  Make this editable later\n    ,\n    style: {\n      width: 20,\n      height: 20,\n      backgroundColor: grid[i][k] ? \"black\" : undefined,\n      border: \"1px solid black\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default Grid;","map":{"version":3,"sources":["C:/Users/EvolveD/Desktop/ConwaysGameOfLife/src/Components/Grid.js"],"names":["React","useState","useCallback","produce","numRows","numCols","Grid","grid","setGrid","rows","i","push","Array","from","running","setRunning","runningRef","useRef","current","runSimulation","setTimeout","display","gridTemplateColumns","map","col","k","newGrid","gridCopy","width","height","backgroundColor","undefined","border"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,OAAP,MAAoB,OAApB,C,CAEA;;AACA,MAAMC,OAAO,GAAG,EAAhB;AACA,MAAMC,OAAO,GAAG,EAAhB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,MAAM;AACrC,UAAMQ,IAAI,GAAG,EAAb;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,OAApB,EAA6BM,CAAC,EAA9B,EAAkC;AAChCD,MAAAA,IAAI,CAACE,IAAL,CAAUC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACP,OAAD,CAAhB,EAA2B,MAAM,CAAjC,CAAV;AACD;;AAED,WAAOI,IAAP;AACD,GAP+B,CAAhC;AASA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMe,UAAU,GAAGC,MAAM,CAACH,OAAD,CAAzB;AACAE,EAAAA,UAAU,CAACE,OAAX,GAAqBJ,OAArB,CAbiB,CAejB;;AACA,QAAMK,aAAa,GAAGjB,WAAW,CAAC,MAAM;AACtC,QAAI,CAACY,OAAL,EAAc;AACZ;AACD;;AACDM,IAAAA,UAAU,CAACD,aAAD,EAAgB,IAAhB,CAAV;AACD,GALgC,EAK9B,EAL8B,CAAjC;AAOA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAE,MAAMJ,UAAU,CAAC,CAACD,OAAF,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGA,OAAO,GAAG,MAAH,GAAY,OAFtB,CADF,eAKE;AACE,IAAA,KAAK,EAAE;AACLO,MAAAA,OAAO,EAAE,MADJ;AAELC,MAAAA,mBAAmB,EAAG,UAASjB,OAAQ;AAFlC,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGE,IAAI,CAACgB,GAAL,CAAS,CAACd,IAAD,EAAOC,CAAP,KACRD,IAAI,CAACc,GAAL,CAAS,CAACC,GAAD,EAAMC,CAAN,kBACP;AACE,IAAA,GAAG,EAAG,GAAEf,CAAE,IAAGe,CAAE,EADjB,CAEE;AAFF;AAGE,IAAA,OAAO,EAAE,MAAM;AACb;AACA,YAAMC,OAAO,GAAGvB,OAAO,CAACI,IAAD,EAAQoB,QAAD,IAAc;AAC1CA,QAAAA,QAAQ,CAACjB,CAAD,CAAR,CAAYe,CAAZ,IAAiBlB,IAAI,CAACG,CAAD,CAAJ,CAAQe,CAAR,IAAa,CAAb,GAAiB,CAAlC;AACD,OAFsB,CAAvB;AAGAjB,MAAAA,OAAO,CAACkB,OAAD,CAAP;AACD,KATH,CAUE;AAVF;AAWE,IAAA,KAAK,EAAE;AACLE,MAAAA,KAAK,EAAE,EADF;AAELC,MAAAA,MAAM,EAAE,EAFH;AAGLC,MAAAA,eAAe,EAAEvB,IAAI,CAACG,CAAD,CAAJ,CAAQe,CAAR,IAAa,OAAb,GAAuBM,SAHnC;AAILC,MAAAA,MAAM,EAAE;AAJH,KAXT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADD,CANH,CALF,CADF;AAqCD,CA5DD;;AA8DA,eAAe1B,IAAf","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport produce from \"immer\";\r\n\r\n// Set the number of rows and columns.  Make this adjustable later\r\nconst numRows = 25;\r\nconst numCols = 25;\r\n\r\nconst Grid = () => {\r\n  // Creating a grid and grid state and looping over it setting all initial values to 0\r\n  const [grid, setGrid] = useState(() => {\r\n    const rows = [];\r\n    for (var i = 0; i < numRows; i++) {\r\n      rows.push(Array.from(Array(numCols), () => 0));\r\n    }\r\n\r\n    return rows;\r\n  });\r\n\r\n  const [running, setRunning] = useState(false);\r\n  const runningRef = useRef(running);\r\n  runningRef.current = running;\r\n\r\n  // Simulation function\r\n  const runSimulation = useCallback(() => {\r\n    if (!running) {\r\n      return;\r\n    }\r\n    setTimeout(runSimulation, 1000);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setRunning(!running)}>\r\n        {/* Togfgle start and stop */}\r\n        {running ? \"Stop\" : \"Start\"}\r\n      </button>\r\n      <div\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: `repeat(${numCols}, 20px)`,\r\n        }}\r\n      >\r\n        {grid.map((rows, i) =>\r\n          rows.map((col, k) => (\r\n            <div\r\n              key={`${i}-${k}`}\r\n              //Make grid clickable\r\n              onClick={() => {\r\n                //Setting grid to new copy so that it is mutable\r\n                const newGrid = produce(grid, (gridCopy) => {\r\n                  gridCopy[i][k] = grid[i][k] ? 0 : 1;\r\n                });\r\n                setGrid(newGrid);\r\n              }}\r\n              //Setting width, height, and background color.  Make this editable later\r\n              style={{\r\n                width: 20,\r\n                height: 20,\r\n                backgroundColor: grid[i][k] ? \"black\" : undefined,\r\n                border: \"1px solid black\",\r\n              }}\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n"]},"metadata":{},"sourceType":"module"}