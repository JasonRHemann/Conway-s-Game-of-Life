{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EvolveD\\\\Desktop\\\\ConwaysGameOfLife\\\\src\\\\Components\\\\Grid.js\";\nimport React, { useState, useCallback, useRef, useReducer } from \"react\";\nimport produce from \"immer\";\nimport { getRoles } from \"@testing-library/react\"; // Set the number of rows and columns.  Make this adjustable later\n\nconst numRows = 10;\nconst numCols = 10; // list of operations to check every neighbor\n\nconst operations = [[0, 1], [1, 1], [1, 0], [0, -1], [-1, -1], [-1, 0], [1, -1], [-1, 1]];\n\nconst clearGrid = () => {\n  const rows = [];\n\n  for (var i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n\n  console.log(rows);\n  return rows;\n};\n\nfunction Grid() {\n  // Creating a grid and grid state and looping over it setting all initial values to 0\n  const [running, setRunning] = useState(false);\n  const runningRef = useRef(running);\n  runningRef.current = running;\n  const [generation, setGeneration] = useState(0);\n\n  function initialState() {\n    const rows = [];\n\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => 0));\n    }\n\n    return rows;\n  }\n\n  const [grid, setGrid] = useState(initialState);\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n  });\n  setGrid(g => {\n    return produce(g, gridCopy => {\n      for (let i = 0; i < numRows; i++) {\n        for (let j = 0; j < numCols; j++) {\n          let neighbors = 0;\n          operations.forEach(([x, y]) => {\n            const newI = i + x;\n            const newJ = j + y;\n\n            if (newI >= 0 && newI < numRows && newJ >= 0 < numCols) {\n              neighbors += g[newI][newJ];\n            }\n          });\n\n          if (neighbors < 2 || neighbors > 3) {\n            gridCopy[i][j] = 0;\n          } else if (g[i][j] === 0 && neighbors === 3) {\n            gridCopy[i][j] = 1;\n          }\n        }\n      }\n    });\n    setTimeout(runSimulation, 100);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setRunning(!running);\n\n      if (!running) {\n        runningRef.current = true;\n        runSimulation();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, running ? \"Stop\" : \"Start\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setGrid(clearGrid());\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, \"Clear\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      const rows = [];\n\n      for (var i = 0; i < numRows; i++) {\n        rows.push(Array.from(Array(numCols), () => Math.random() > 0.7 ? 1 : 0));\n      }\n\n      setGrid(rows);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, \"Random\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"grid\",\n      gridTemplateColumns: `repeat(${numCols}, 20px)`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, grid.map((rows, i) => rows.map((col, j) => /*#__PURE__*/React.createElement(\"div\", {\n    key: `${i}-${j}` //Make grid clickable\n    ,\n    onClick: () => {\n      //Setting grid to new copy so that it is mutable\n      const newGrid = produce(grid, gridCopy => {\n        gridCopy[i][j] = grid[i][j] ? 0 : 1;\n      });\n      setGrid(newGrid);\n    } //Setting width, height, and background color.  Make this editable later\n    ,\n    style: {\n      width: 14,\n      height: 15,\n      backgroundColor: grid[i][j] ? \"blue\" : undefined,\n      border: \"1px solid black\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, \"Generation: \", generation), \" \"));\n}\n\nexport default Grid;","map":{"version":3,"sources":["C:/Users/EvolveD/Desktop/ConwaysGameOfLife/src/Components/Grid.js"],"names":["React","useState","useCallback","useRef","useReducer","produce","getRoles","numRows","numCols","operations","clearGrid","rows","i","push","Array","from","console","log","Grid","running","setRunning","runningRef","current","generation","setGeneration","initialState","grid","setGrid","runSimulation","g","gridCopy","j","neighbors","forEach","x","y","newI","newJ","setTimeout","Math","random","display","gridTemplateColumns","map","col","newGrid","width","height","backgroundColor","undefined","border"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useRef, useReducer } from \"react\";\r\nimport produce from \"immer\";\r\nimport { getRoles } from \"@testing-library/react\";\r\n\r\n// Set the number of rows and columns.  Make this adjustable later\r\n\r\nconst numRows = 10;\r\nconst numCols = 10;\r\n\r\n// list of operations to check every neighbor\r\nconst operations = [\r\n  [0, 1],\r\n  [1, 1],\r\n  [1, 0],\r\n  [0, -1],\r\n  [-1, -1],\r\n  [-1, 0],\r\n  [1, -1],\r\n  [-1, 1],\r\n];\r\n\r\nconst clearGrid = () => {\r\n  const rows = [];\r\n  for (var i = 0; i < numRows; i++) {\r\n    rows.push(Array.from(Array(numCols), () => 0));\r\n  }\r\n  console.log(rows);\r\n  return rows;\r\n};\r\n\r\nfunction Grid() {\r\n  // Creating a grid and grid state and looping over it setting all initial values to 0\r\n\r\n  const [running, setRunning] = useState(false);\r\n  const runningRef = useRef(running);\r\n  runningRef.current = running;\r\n  const [generation, setGeneration] = useState(0);\r\n\r\n  function initialState() {\r\n    const rows = [];\r\n    for (let i = 0; i < numRows; i++) {\r\n      rows.push(Array.from(Array(numCols), () => 0));\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  const [grid, setGrid] = useState(initialState);\r\n\r\n  const runSimulation = useCallback(() => {\r\n    if (!runningRef.current) {\r\n      return;\r\n    }\r\n  });\r\n\r\n  setGrid((g) => {\r\n    return produce(g, (gridCopy) => {\r\n      for (let i = 0; i < numRows; i++) {\r\n        for (let j = 0; j < numCols; j++) {\r\n          let neighbors = 0;\r\n          operations.forEach(([x, y]) => {\r\n            const newI = i + x;\r\n            const newJ = j + y;\r\n            if (newI >= 0 && newI < numRows && newJ >= 0 < numCols) {\r\n              neighbors += g[newI][newJ];\r\n            }\r\n          });\r\n\r\n          if (neighbors < 2 || neighbors > 3) {\r\n            gridCopy[i][j] = 0;\r\n          } else if (g[i][j] === 0 && neighbors === 3) {\r\n            gridCopy[i][j] = 1;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    setTimeout(runSimulation, 100);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={() => {\r\n          setRunning(!running);\r\n          if (!running) {\r\n            runningRef.current = true;\r\n            runSimulation();\r\n          }\r\n        }}\r\n      >\r\n        {running ? \"Stop\" : \"Start\"}\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          setGrid(clearGrid());\r\n        }}\r\n      >\r\n        Clear\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          const rows = [];\r\n          for (var i = 0; i < numRows; i++) {\r\n            rows.push(\r\n              Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0))\r\n            );\r\n          }\r\n          setGrid(rows);\r\n        }}\r\n      >\r\n        Random\r\n      </button>\r\n      <div\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: `repeat(${numCols}, 20px)`,\r\n        }}\r\n      >\r\n        {grid.map((rows, i) =>\r\n          rows.map((col, j) => (\r\n            <div\r\n              key={`${i}-${j}`}\r\n              //Make grid clickable\r\n              onClick={() => {\r\n                //Setting grid to new copy so that it is mutable\r\n                const newGrid = produce(grid, (gridCopy) => {\r\n                  gridCopy[i][j] = grid[i][j] ? 0 : 1;\r\n                });\r\n                setGrid(newGrid);\r\n              }}\r\n              //Setting width, height, and background color.  Make this editable later\r\n              style={{\r\n                width: 14,\r\n                height: 15,\r\n                backgroundColor: grid[i][j] ? \"blue\" : undefined,\r\n                border: \"1px solid black\",\r\n              }}\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n\r\n      <div>\r\n        <p>Generation: {generation}</p>{\" \"}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Grid;\r\n"]},"metadata":{},"sourceType":"module"}