{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EvolveD\\\\Desktop\\\\ConwaysGameOfLife\\\\src\\\\Components\\\\Grid.js\";\nimport React, { useState, useCallback, useRef } from \"react\";\nimport produce from \"immer\";\nimport styled from \"styled-components\";\nconst MainContainer = styled.div`\n  background-color: #33ff86;\n  border-radius: 5px;\n`;\nconst ButtonContainer = styled.div`\n  border; 2px solid red;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n  padding: 5px;\n`;\nconst Button = styled.button`\n  color: black;\n  margin-top: 10px;\n  width: 8vw;\n  height: 40px;\n  border: none;\n  border-radius: 5px;\n  font-size: 16px;\n  font-weight: bolder;\n  background-color: #add8e6;\n`;\nconst Counters = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n`;\n\nvar _ = require(\"lodash\"); //setting list of operations to every neighbor\n\n\nconst operations = [[0, 1], [0, -1], [1, -1], [-1, 1], [1, 1], [-1, -1], [1, 0], [-1, 0]];\n\nfunction Grid() {\n  //setting variables and state.\n  const [running, setrunning] = useState(false);\n  const runningRef = useRef(running);\n  runningRef.current = running;\n  const [generation, setGeneration] = useState(0);\n  const timeRef = useRef(200);\n  const [sum, setSum] = useState(0);\n  const numRows = 35;\n  const numCols = 80;\n  const colors = [\"#427BFF\", \"#7044FF\", \"#FFDB2C\", \"#FFB92C\"];\n  const [tooltipOpen, setTooltipOpen] = useState(false); //creating grid and setting to all zeros\n\n  function initialState() {\n    const rows = [];\n\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => 0));\n    }\n\n    console.log(rows);\n    return rows;\n  }\n\n  const [grid, setGrid] = useState(initialState);\n  const runSim = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n\n    setGrid(g => {\n      let validGrid = false;\n      validGrid = false; // creat copy of grid\n\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y; //checking to see if out of bounds.\n\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += g[newI][newK];\n              }\n            }); //counting number of neighbors\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              validGrid = true;\n              gridCopy[i][k] = 1;\n            }\n          }\n        } // counting generation\n\n\n        if (validGrid) {\n          setGeneration(num => num + 1);\n        } //counting number of alive cells\n\n\n        setSum(gridCopy.flat().reduce((acc, cv) => {\n          return acc + cv;\n        }));\n      });\n    });\n    setTimeout(runSim, timeRef.current);\n  }, [timeRef.current]);\n  console.log(timeRef.current);\n  return /*#__PURE__*/React.createElement(MainContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ButtonContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => {\n      setrunning(!running);\n\n      if (!running) {\n        runningRef.current = true;\n        runSim();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, !runningRef.current ? \"Start\" : \"Stop\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => {\n      const rows = [];\n\n      for (let i = 0; i < numRows; i++) {\n        rows.push(Array.from(Array(numCols), () => Math.random() > 0.7 ? 1 : 0));\n      }\n\n      setGrid(rows);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, \"Random\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => {\n      setGrid(initialState);\n      setGeneration(0);\n      setSum(0);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, \"Clear\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => {\n      timeRef.current = 2;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, \"Fast\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => {\n      timeRef.current = 200;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  }, \"Normal\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => {\n      timeRef.current = 400;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }\n  }, \"Slow\")), /*#__PURE__*/React.createElement(Counters, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, \" Generation: \", generation), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, \" Cells: \", sum)), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"grid\",\n      gridTemplateColumns: `repeat(${numCols},15px)`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }\n  }, grid.map((rows, i) => rows.map((col, k) => /*#__PURE__*/React.createElement(\"div\", {\n    key: `${i}-${k}`,\n    onClick: () => {\n      //using immer to make a copy and utilize double buffer\n      const newGrid = produce(grid, gridCopy => {\n        gridCopy[i][k] = grid[i][k] ? 0 : 1;\n      });\n      setGrid(newGrid);\n    },\n    style: {\n      width: 14,\n      height: 15,\n      //changing background depending on amount of cells\n      backgroundColor: grid[i][k] && sum > 200 ? _.sample(colors) : grid[i][k] && sum > 100 ? \"#4666FF\" : grid[i][k] && sum >= 0 ? \"#FE000D\" : undefined,\n      border: \"1px solid black\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }\n  })))));\n}\n\nexport default Grid;","map":{"version":3,"sources":["C:/Users/EvolveD/Desktop/ConwaysGameOfLife/src/Components/Grid.js"],"names":["React","useState","useCallback","useRef","produce","styled","MainContainer","div","ButtonContainer","Button","button","Counters","_","require","operations","Grid","running","setrunning","runningRef","current","generation","setGeneration","timeRef","sum","setSum","numRows","numCols","colors","tooltipOpen","setTooltipOpen","initialState","rows","i","push","Array","from","console","log","grid","setGrid","runSim","g","validGrid","gridCopy","k","neighbors","forEach","x","y","newI","newK","num","flat","reduce","acc","cv","setTimeout","Math","random","display","gridTemplateColumns","map","col","newGrid","width","height","backgroundColor","sample","undefined","border"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useRef } from \"react\";\r\nimport produce from \"immer\";\r\nimport styled from \"styled-components\";\r\n\r\nconst MainContainer = styled.div`\r\n  background-color: #33ff86;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n  border; 2px solid red;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-evenly;\r\n  padding: 5px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  color: black;\r\n  margin-top: 10px;\r\n  width: 8vw;\r\n  height: 40px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-size: 16px;\r\n  font-weight: bolder;\r\n  background-color: #add8e6;\r\n`;\r\n\r\nconst Counters = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-evenly;\r\n`;\r\n\r\nvar _ = require(\"lodash\");\r\n\r\n//setting list of operations to every neighbor\r\nconst operations = [\r\n  [0, 1],\r\n  [0, -1],\r\n  [1, -1],\r\n  [-1, 1],\r\n  [1, 1],\r\n  [-1, -1],\r\n  [1, 0],\r\n  [-1, 0],\r\n];\r\n\r\nfunction Grid() {\r\n  //setting variables and state.\r\n  const [running, setrunning] = useState(false);\r\n  const runningRef = useRef(running);\r\n  runningRef.current = running;\r\n  const [generation, setGeneration] = useState(0);\r\n  const timeRef = useRef(200);\r\n  const [sum, setSum] = useState(0);\r\n  const numRows = 35;\r\n  const numCols = 80;\r\n  const colors = [\"#427BFF\", \"#7044FF\", \"#FFDB2C\", \"#FFB92C\"];\r\n  const [tooltipOpen, setTooltipOpen] = useState(false);\r\n\r\n  //creating grid and setting to all zeros\r\n  function initialState() {\r\n    const rows = [];\r\n    for (let i = 0; i < numRows; i++) {\r\n      rows.push(Array.from(Array(numCols), () => 0));\r\n    }\r\n    console.log(rows);\r\n    return rows;\r\n  }\r\n\r\n  const [grid, setGrid] = useState(initialState);\r\n\r\n  const runSim = useCallback(() => {\r\n    if (!runningRef.current) {\r\n      return;\r\n    }\r\n    setGrid((g) => {\r\n      let validGrid = false;\r\n      validGrid = false;\r\n      // creat copy of grid\r\n      return produce(g, (gridCopy) => {\r\n        for (let i = 0; i < numRows; i++) {\r\n          for (let k = 0; k < numCols; k++) {\r\n            let neighbors = 0;\r\n            operations.forEach(([x, y]) => {\r\n              const newI = i + x;\r\n              const newK = k + y;\r\n              //checking to see if out of bounds.\r\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\r\n                neighbors += g[newI][newK];\r\n              }\r\n            });\r\n            //counting number of neighbors\r\n            if (neighbors < 2 || neighbors > 3) {\r\n              gridCopy[i][k] = 0;\r\n            } else if (g[i][k] === 0 && neighbors === 3) {\r\n              validGrid = true;\r\n              gridCopy[i][k] = 1;\r\n            }\r\n          }\r\n        }\r\n        // counting generation\r\n        if (validGrid) {\r\n          setGeneration((num) => num + 1);\r\n        }\r\n        //counting number of alive cells\r\n        setSum(\r\n          gridCopy.flat().reduce((acc, cv) => {\r\n            return acc + cv;\r\n          })\r\n        );\r\n      });\r\n    });\r\n    setTimeout(runSim, timeRef.current);\r\n  }, [timeRef.current]);\r\n  console.log(timeRef.current);\r\n  return (\r\n    <MainContainer>\r\n      <ButtonContainer>\r\n        <Button\r\n          onClick={() => {\r\n            setrunning(!running);\r\n            if (!running) {\r\n              runningRef.current = true;\r\n              runSim();\r\n            }\r\n          }}\r\n        >\r\n          {!runningRef.current ? \"Start\" : \"Stop\"}\r\n        </Button>\r\n\r\n        {/* set grid with random live cells */}\r\n        <Button\r\n          onClick={() => {\r\n            const rows = [];\r\n            for (let i = 0; i < numRows; i++) {\r\n              rows.push(\r\n                Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0))\r\n              );\r\n            }\r\n            setGrid(rows);\r\n          }}\r\n        >\r\n          Random\r\n        </Button>\r\n\r\n        {/* reset all values to initial state to clear */}\r\n        <Button\r\n          onClick={() => {\r\n            setGrid(initialState);\r\n            setGeneration(0);\r\n            setSum(0);\r\n          }}\r\n        >\r\n          Clear\r\n        </Button>\r\n\r\n        <Button\r\n          onClick={() => {\r\n            timeRef.current = 2;\r\n          }}\r\n        >\r\n          Fast\r\n        </Button>\r\n        <Button\r\n          onClick={() => {\r\n            timeRef.current = 200;\r\n          }}\r\n        >\r\n          Normal\r\n        </Button>\r\n        <Button\r\n          onClick={() => {\r\n            timeRef.current = 400;\r\n          }}\r\n        >\r\n          Slow\r\n        </Button>\r\n      </ButtonContainer>\r\n      <Counters>\r\n        <h2> Generation: {generation}</h2>\r\n        <h2> Cells: {sum}</h2>\r\n      </Counters>\r\n      <div\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: `repeat(${numCols},15px)`,\r\n        }}\r\n      >\r\n        {/* drawing grid */}\r\n        {grid.map((rows, i) =>\r\n          rows.map((col, k) => (\r\n            <div\r\n              key={`${i}-${k}`}\r\n              onClick={() => {\r\n                //using immer to make a copy and utilize double buffer\r\n                const newGrid = produce(grid, (gridCopy) => {\r\n                  gridCopy[i][k] = grid[i][k] ? 0 : 1;\r\n                });\r\n                setGrid(newGrid);\r\n              }}\r\n              style={{\r\n                width: 14,\r\n                height: 15,\r\n                //changing background depending on amount of cells\r\n                backgroundColor:\r\n                  grid[i][k] && sum > 200\r\n                    ? _.sample(colors)\r\n                    : grid[i][k] && sum > 100\r\n                    ? \"#4666FF\"\r\n                    : grid[i][k] && sum >= 0\r\n                    ? \"#FE000D\"\r\n                    : undefined,\r\n                border: \"1px solid black\",\r\n              }}\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n    </MainContainer>\r\n  );\r\n}\r\nexport default Grid;\r\n"]},"metadata":{},"sourceType":"module"}