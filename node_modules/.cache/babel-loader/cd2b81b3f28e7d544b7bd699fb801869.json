{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EvolveD\\\\Desktop\\\\ConwaysGameOfLife\\\\src\\\\Components\\\\Grid.js\";\nimport React, { useState } from \"react\";\nimport produce from \"immer\"; // Set the number of rows and columns.  Make this adjustable later\n\nconst numRows = 25;\nconst numCols = 25;\n\nconst Grid = () => {\n  // Creating a grid and grid state and looping over it setting all initial values to 0\n  const [grid, setGrid] = useState(() => {\n    const rows = [];\n\n    for (var i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => 0));\n    }\n\n    return rows;\n  });\n  return (\n    /*#__PURE__*/\n    //Formating into grid\n    React.createElement(\"div\", {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${numCols}, 20px)`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 5\n      }\n    }, grid.map((rows, i) => rows.map((col, k) => /*#__PURE__*/React.createElement(\"div\", {\n      key: `${i}-${k}` //Make grid clickable\n      ,\n      onClick: () => {\n        //Setting grid to new copy so that it is mutable\n        const newGrid = produce(grid, gridCopy => {\n          gridCopy[i][k] = grid[i][k] ? 0 : 1;\n        });\n        setGrid(newGrid);\n      },\n      style: {\n        width: 20,\n        height: 20,\n        backgroundColor: grid[i][k] ? \"black\" : undefined,\n        border: \"1px solid black\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }\n    }))))\n  );\n};\n\nexport default Grid;","map":{"version":3,"sources":["C:/Users/EvolveD/Desktop/ConwaysGameOfLife/src/Components/Grid.js"],"names":["React","useState","produce","numRows","numCols","Grid","grid","setGrid","rows","i","push","Array","from","display","gridTemplateColumns","map","col","k","newGrid","gridCopy","width","height","backgroundColor","undefined","border"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,OAApB,C,CAEA;;AACA,MAAMC,OAAO,GAAG,EAAhB;AACA,MAAMC,OAAO,GAAG,EAAhB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,MAAM;AACrC,UAAMO,IAAI,GAAG,EAAb;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,OAApB,EAA6BM,CAAC,EAA9B,EAAkC;AAChCD,MAAAA,IAAI,CAACE,IAAL,CAAUC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACP,OAAD,CAAhB,EAA2B,MAAM,CAAjC,CAAV;AACD;;AAED,WAAOI,IAAP;AACD,GAP+B,CAAhC;AASA;AAAA;AACE;AACA;AACE,MAAA,KAAK,EAAE;AACLK,QAAAA,OAAO,EAAE,MADJ;AAELC,QAAAA,mBAAmB,EAAG,UAASV,OAAQ;AAFlC,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMGE,IAAI,CAACS,GAAL,CAAS,CAACP,IAAD,EAAOC,CAAP,KACRD,IAAI,CAACO,GAAL,CAAS,CAACC,GAAD,EAAMC,CAAN,kBACP;AACE,MAAA,GAAG,EAAG,GAAER,CAAE,IAAGQ,CAAE,EADjB,CAEE;AAFF;AAGE,MAAA,OAAO,EAAE,MAAM;AACb;AACA,cAAMC,OAAO,GAAGhB,OAAO,CAACI,IAAD,EAAQa,QAAD,IAAc;AAC1CA,UAAAA,QAAQ,CAACV,CAAD,CAAR,CAAYQ,CAAZ,IAAiBX,IAAI,CAACG,CAAD,CAAJ,CAAQQ,CAAR,IAAa,CAAb,GAAiB,CAAlC;AACD,SAFsB,CAAvB;AAGAV,QAAAA,OAAO,CAACW,OAAD,CAAP;AACD,OATH;AAUE,MAAA,KAAK,EAAE;AACLE,QAAAA,KAAK,EAAE,EADF;AAELC,QAAAA,MAAM,EAAE,EAFH;AAGLC,QAAAA,eAAe,EAAEhB,IAAI,CAACG,CAAD,CAAJ,CAAQQ,CAAR,IAAa,OAAb,GAAuBM,SAHnC;AAILC,QAAAA,MAAM,EAAE;AAJH,OAVT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADD,CANH;AAFF;AA+BD,CA1CD;;AA4CA,eAAenB,IAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport produce from \"immer\";\r\n\r\n// Set the number of rows and columns.  Make this adjustable later\r\nconst numRows = 25;\r\nconst numCols = 25;\r\n\r\nconst Grid = () => {\r\n  // Creating a grid and grid state and looping over it setting all initial values to 0\r\n  const [grid, setGrid] = useState(() => {\r\n    const rows = [];\r\n    for (var i = 0; i < numRows; i++) {\r\n      rows.push(Array.from(Array(numCols), () => 0));\r\n    }\r\n\r\n    return rows;\r\n  });\r\n\r\n  return (\r\n    //Formating into grid\r\n    <div\r\n      style={{\r\n        display: \"grid\",\r\n        gridTemplateColumns: `repeat(${numCols}, 20px)`,\r\n      }}\r\n    >\r\n      {grid.map((rows, i) =>\r\n        rows.map((col, k) => (\r\n          <div\r\n            key={`${i}-${k}`}\r\n            //Make grid clickable\r\n            onClick={() => {\r\n              //Setting grid to new copy so that it is mutable\r\n              const newGrid = produce(grid, (gridCopy) => {\r\n                gridCopy[i][k] = grid[i][k] ? 0 : 1;\r\n              });\r\n              setGrid(newGrid);\r\n            }}\r\n            style={{\r\n              width: 20,\r\n              height: 20,\r\n              backgroundColor: grid[i][k] ? \"black\" : undefined,\r\n              border: \"1px solid black\",\r\n            }}\r\n          />\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n"]},"metadata":{},"sourceType":"module"}